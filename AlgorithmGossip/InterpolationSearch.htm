<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>


    <link rel="stylesheet" href="css/stdlayout.css" type="text/css">


    <link rel="stylesheet" href="css/print.css" type="text/css">


    <meta content="text/html; charset=utf-8" http-equiv="content-type">


    <title>插补搜寻法</title>
</head>


<body>


<h1><a href="AlgorithmGossip.htm">Algorithm Gossip: 插补搜寻法</a></h1>


<h2>说明</h2>
如果却搜寻的资料分佈平均的话，可以使用插补（Interpolation）搜寻法来进行搜寻，在搜寻的对象大于500时，插补搜寻法会比 二分搜寻法 来的快速。<br>
<h2>解法</h2>
插补搜寻法是以资料分佈的近似直线来作比例运算，以求出中间的索引并进行资料比对，如果取出的值小于要寻找的值，则提高下界，如果取出的值大于要寻找的
值，则降低下界，如此不断的减少搜寻的范围，所以其本原则与二分搜寻法是相同的，至于中间值的寻找是透过比例运算，如下所示，其中K是指定要寻找的对象，
而m则是可能的索引值： <br>
<div style="text-align: center;"><img style="width: 435px; height: 182px;" alt="插补搜寻" title="插补搜寻"
                                      src="images/interpolationSearch-1.jpg"></div>
<br>

<h2> 实现</h2>

<ul>
    <li> C
    </li>
</ul>

<pre>#include &lt;stdio.h&gt; <br>#include &lt;stdlib.h&gt; <br>#include &lt;time.h&gt; <br>#define MAX 10 <br>#define SWAP(x,y) {int t; t = x; x = y; y = t;} <br><br>void quicksort(int[], int, int); <br>int intsrch(int[], int); <br><br>int main(void) { <br>    int number[MAX] = {0}; <br>    int i, find; <br><br>    srand(time(NULL)); <br><br>    for(i = 0; i &lt; MAX; i++) { <br>        number[i] = rand() % 100; <br>    } <br><br>    quicksort(number, 0, MAX-1); <br><br>    printf("数列："); <br>    for(i = 0; i &lt; MAX; i++) <br>        printf("%d ", number[i]); <br><br>    printf("\n输入寻找对象："); <br>    scanf("%d", &amp;find); <br><br>    if((i = intsrch(number, find)) &gt;= 0) <br>        printf("找到数字于索引 %d ", i); <br>    else <br>        printf("\n找不到指定数"); <br>    <br>    printf("\n"); <br><br>    return 0; <br>} <br><br>int intsrch(int number[], int find) { <br>    int low, mid, upper; <br><br>    low = 0; <br>    upper = MAX - 1; <br><br>    while(low &lt;= upper) { <br>        mid = (upper-low)* <br>            (find-number[low])/(number[upper]-number[low]) <br>            + low; <br>        if(mid &lt; low || mid &gt; upper) <br>            return -1; <br><br>        if(find &lt; number[mid]) <br>            upper = mid - 1; <br>        else if(find &gt; number[mid]) <br>            low = mid + 1; <br>        else <br>            return mid; <br>     } <br><br>     return -1;<br>} <br><br>void quicksort(int number[], int left, int right) { <br>    int i, j, k, s; <br><br>    if(left &lt; right) { <br>        s = number[(left+right)/2]; <br>        i = left - 1; <br>        j = right + 1; <br><br>        while(1) { <br>            while(number[++i] &lt; s) ;  // 向右找 <br>            while(number[--j] &gt; s) ;  // 向左找 <br>            if(i &gt;= j) <br>                break; <br>            SWAP(number[i], number[j]); <br>        } <br><br>        quicksort(number, left, i-1);   // 对左边进行递归 <br>        quicksort(number, j+1, right);  // 对右边进行递归 <br>    } <br>} <br></pre>

<br>

<ul>
    <li> Java
    </li>
</ul>

<pre>public class InterpolationSearch {<br>    public static int search(int[] number, int des) { <br>        int low = 0; <br>        int upper = number.length - 1; <br><br>        while(low &lt;= upper) { <br>            int mid = (upper-low)* <br>               (des-number[low])/(number[upper]-number[low]) <br>                + low; <br>            if(mid &lt; low || mid &gt; upper) <br>                return -1; <br><br>            if(des &lt; number[mid]) <br>                upper = mid - 1; <br>            else if(des &gt; number[mid]) <br>                low = mid + 1; <br>            else <br>                return mid; <br>        }<br><br>        return -1;<br>    }<br>    <br>    public static void main(String[] args) {<br>        int[] number = {1, 4, 2, 6, 7, 3, 9, 8};<br>        <br>        QuickSort.sort(number);<br>        <br>        int find = InterpolationSearch.search(number, 3);<br>        <br>        if(find != -1) <br>            System.out.println("找到数值于索引" + find); <br>        else <br>            System.out.println("找不到数值"); <br>    } <br>}</pre>
<br>


</body>
</html>
